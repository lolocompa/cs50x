sort1 uses: bubble sort

How do you know?: if we use a list that is already sorted, the lower bound of bubble sort is n while the lower bound of selection sort is n*n, i already figured out that sort 2 is merge sort so i compare the time with sort 1 and sort 3 and i found that sort 1 was the fastest so it should be bubbble sort

sort2 uses: merge sort

How do you know?: we saw in lecture that merge sort was faster than both bubble sort and selection sort in sorting numbers in random order, so i executed each sort with random50000.txt and i found that sort2 was the fastest so it must be merge sort

sort3 uses: selection sort

How do you know?: with a sorted list selection sort was clearly the slowest algorithm because its lower bound was n*n wich is way higher than merge sort and bubble sort so i compared the time with a sorted list and found that sort 3 was the slowest so it should be selection sort
